import os
import logging
from urllib.parse import urlparse
from collections import defaultdict

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from groups.easy_sources import run_all

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("news-bot")

BOT_TOKEN   = os.getenv("BOT_TOKEN",   "8392167879:AAG9GgPCXrajvdZca5vJcYopk3HO5w2hBhE")
ADMIN_ID    = int(os.getenv("ADMIN_ID", "6680030792"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://universal-bot-live.onrender.com")

bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher()

# ----------------------- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥ –≤–∏–º–æ–≥—É -----------------------
SECTION_LIMIT = 10      # —Å–∫—ñ–ª—å–∫–∏ –ø—É–Ω–∫—Ç—ñ–≤ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –æ–¥–Ω—É ¬´–î–∂–µ—Ä–µ–ª–æ: ‚Ä¶¬ª
CHUNK_LIMIT   = 3900    # –±–µ–∑–ø–µ—á–Ω–∏–π –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è TG (max 4096)

def _origin(url: str) -> str:
    u = urlparse(url)
    host = u.netloc.replace("www.", "")
    return f"{u.scheme}://{host}"

def _section_url(url: str) -> str:
    """–î–∞—î –∫–æ—Ä–µ–Ω–µ–≤—É URL —Å–µ–∫—Ü—ñ—ó –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è —É —Å—Ç–∏–ª—ñ:
    '–î–∂–µ—Ä–µ–ª–æ: https://epravda.com.ua/finances ‚Äî N –Ω–æ–≤–∏–Ω'
    """
    u = urlparse(url)
    host = u.netloc.replace("www.", "")
    parts = [p for p in u.path.split("/") if p]

    if "epravda.com.ua" in host:
        sec = parts[0] if parts else ""
        return f"{u.scheme}://{host}/{sec}" if sec else f"{u.scheme}://{host}"

    if "minfin.com.ua" in host:
        # –í–æ–Ω–∏ –º–∞—é—Ç—å —è–∫ —Å—Ç–∞—Ç—Ç—ñ –∑–∞ –¥–∞—Ç–æ—é (/ua/2025/10/28/...), —Ç–∞–∫ —ñ —Ä—É–±—Ä–∏–∫–∏ (/ua/news/improvement/)
        if parts and parts[0] == "ua":
            if len(parts) >= 3 and parts[1].isalpha() and parts[2].isalpha():
                sec = "/".join(parts[:3])          # ua/news/improvement
            elif len(parts) >= 2 and parts[1].isalpha():
                sec = "/".join(parts[:2])          # ua/news
            else:
                sec = "ua"                          # –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä—ñ–Ω—å /ua
        else:
            sec = parts[0] if parts else ""
        return f"{u.scheme}://{host}/{sec}".rstrip("/")

    # –¥–µ—Ñ–æ–ª—Ç
    return f"{u.scheme}://{host}"

def _group(items: list[dict]) -> dict:
    grouped = defaultdict(lambda: defaultdict(list))  # source -> section_url -> [items]
    for n in items:
        url = n.get("url") or ""
        if not url:
            continue
        src = urlparse(url).netloc.replace("www.", "")
        sec = _section_url(url)
        grouped[src][sec].append(n)
    return grouped

def _build_source_text(src: str, sections: dict[str, list[dict]]) -> str:
    total_unique = sum(len(v) for v in sections.values())
    lines = [
        f"‚úÖ {src.split('.')[0]} ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        f"–£—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {total_unique} (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥—É–±–ª—ñ–≤)",
        f"–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω: {total_unique}",
        ""
    ]
    for sec_url, items in sections.items():
        show = items[:SECTION_LIMIT]
        lines.append(f"–î–∂–µ—Ä–µ–ª–æ: {sec_url} ‚Äî {len(show)} –Ω–æ–≤–∏–Ω:")
        for i, n in enumerate(show, 1):
            title = n.get("title", "‚Äî")
            date  = n.get("date", "‚Äî")
            url   = n.get("url", "")
            lines.append(f"{i}. {title} ({date})\n   {url}")
        lines.append("")
    return "\n".join(lines).strip()

def _split_chunks(text: str, limit: int = CHUNK_LIMIT) -> list[str]:
    # —Å–ø–æ—á–∞—Ç–∫—É –¥—ñ–ª–∏–º–æ ¬´–∞–±–∑–∞—Ü–∞–º–∏¬ª
    parts = text.split("\n\n")
    chunks, buf = [], ""
    for p in parts:
        add = (p if buf == "" else "\n\n" + p)
        if len(buf) + len(add) <= limit:
            buf += add
        else:
            if buf:
                chunks.append(buf)
            # —è–∫—â–æ –æ–¥–∏–Ω –∞–±–∑–∞—Ü > –ª—ñ–º—ñ—Ç—É, —Ä—ñ–∂–µ–º–æ –π–æ–≥–æ –≥—Ä—É–±–æ
            while len(p) > limit:
                chunks.append(p[:limit])
                p = p[limit:]
            buf = p
    if buf:
        chunks.append(buf)
    return chunks

async def _send_long(message: types.Message, text: str):
    for part in _split_chunks(text):
        await message.answer(part, disable_web_page_preview=True)

# ---------------------------- –•–µ–Ω–¥–ª–µ—Ä–∏ ---------------------------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /news_easy ‚Äî Epravda + Minfin (–≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ —Å–µ–∫—Ü—ñ—è–º–∏, –±–µ–∑ –ø—Ä–µ–≤‚Äô—é)"
    )

@dp.message(Command("news_easy"))
async def news_easy_cmd(message: types.Message):
    await message.answer("‚è≥ –ó–±–∏—Ä–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
    try:
        results = run_all()
        if not results:
            await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –Ω–æ–≤–∏–Ω.")
            return

        grouped = _group(results)
        # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –æ–∫—Ä–µ–º–∏–º –±–ª–æ–∫–æ–º –ø–æ –∫–æ–∂–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—É
        for src in ("epravda.com.ua", "minfin.com.ua"):
            if src in grouped:
                text = _build_source_text(src, grouped[src])
                await _send_long(message, text)

    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω: {e}")

# -------------------------- AIOHTTP + Webhook --------------------------
async def handle_health(request: web.Request):
    return web.json_response({"status": "alive"})

async def handle_webhook(request: web.Request):
    data = await request.json()
    await dp.feed_webhook_update(bot, data)
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    url = f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}"
    await bot.set_webhook(url, drop_pending_updates=True)
    log.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {url}")

async def on_shutdown(app: web.Application):
    log.info("üîª Deleting webhook & closing session‚Ä¶")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    finally:
        await bot.session.close()
    log.info("‚úÖ Shutdown complete")

def make_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/health", handle_health)
    app.router.add_post(f"/webhook/{BOT_TOKEN}", handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

if __name__ == "__main__":
    port = int(os.getenv("PORT", os.getenv("RENDER_PORT", "10000")))
    web.run_app(make_app(), host="0.0.0.0", port=port)