import os
import asyncio
import logging
import json
from typing import Any, Dict, List, Tuple

from aiohttp import web
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, Update
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest

# === –ö–æ–Ω—Ñ—ñ–≥ ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0")) if os.getenv("ADMIN_ID") else None
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()

# –ë–µ–∑–ø–µ—á–Ω—ñ –º–µ–∂—ñ Telegram
TG_MAX = 4096
SAFETY_MARGIN = 600
CHUNK_LIMIT = TG_MAX - SAFETY_MARGIN  # ~3500 —Å–∏–º–≤.
PER_MESSAGE_DELAY = 0.05  # –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏, —â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ —Ñ–ª—É–¥

# –ù—ñ—è–∫–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω ‚Äî —à–ª–µ–º–æ –≤—Å—ñ, —à–º–∞—Ç—É—î–º–æ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º
SHOW_ALL = True

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("news_bot")

# Aiogram v3
router = Router()
dp = Dispatcher()
dp.include_router(router)
bot = Bot(BOT_TOKEN, parse_mode=None)

# –Ü–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Å–µ—Ä—ñ–≤
try:
    from groups.easy_sources import run_all as run_easy_sources  # –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ —ñ—Å–Ω—É—î –∑–∞ —Ç–≤–æ—î—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
except Exception as e:
    log.exception("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É run_all(): %s", e)
    run_easy_sources = None


# ===================== –î–æ–ø–æ–º—ñ–∂–Ω—ñ =====================

async def send_text_with_retry(chat_id: int, text: str) -> None:
    """–ù–∞–¥—ñ–π–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é 429/BadRequest —Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏."""
    while True:
        try:
            await bot.send_message(chat_id, text)
            await asyncio.sleep(PER_MESSAGE_DELAY)
            return
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after + 0.2)
        except TelegramBadRequest as e:
            # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –≤—Å–µ –æ–¥–Ω–æ –∑–∞–≤–µ–ª–∏–∫–∏–π ‚Äî –ø–æ–¥—Ä—ñ–±–Ω–∏—Ç–∏ —â–µ –∂–æ—Ä—Å—Ç–∫—ñ—à–µ –Ω–∞ 2000
            if "message is too long" in str(e).lower():
                for chunk in chunk_long_text(text, limit=2000):
                    await send_text_with_retry(chat_id, chunk)
                return
            raise
        except Exception as e:
            log.exception("send_text_with_retry error: %s", e)
            # –Ω–µ–≤–µ–ª–∏–∫–∏–π –±–µ–∫–∞–ø-—Ä–µ—Ç—Ä–∞–π
            await asyncio.sleep(0.5)


def chunk_long_text(text: str, limit: int = CHUNK_LIMIT) -> List[str]:
    """–†–æ–∑–±–∏—Ç–∏ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —à–º–∞—Ç–∫–∏ –±–µ–∑ —Ä–æ–∑—Ä–∏–≤—É —Ä—è–¥–∫—ñ–≤/–ª–æ–≥—ñ–∫–∏."""
    if len(text) <= limit:
        return [text]
    parts: List[str] = []
    buf: List[str] = []
    size = 0
    for line in text.splitlines(keepends=True):
        ln = len(line)
        if size + ln > limit and buf:
            parts.append("".join(buf).rstrip())
            buf = [line]
            size = ln
        else:
            buf.append(line)
            size += ln
    if buf:
        parts.append("".join(buf).rstrip())
    return parts


def render_section_header(src: str, section: str, count: int) -> str:
    sec = f" | —Å–µ–∫—Ü—ñ—è: {section}" if section else ""
    return f"–î–∂–µ—Ä–µ–ª–æ: {src}{sec} ‚Äî {count} –Ω–æ–≤–∏–Ω:\n"


def render_item_line(idx: int, title: str, date_str: str, url: str) -> str:
    date_part = f" ({date_str})" if date_str else " (‚Äî)"
    return f"{idx}. {title}{date_part}\n   {url}\n"


def normalize_results(results: Any) -> List[Tuple[str, str, List[Dict[str, str]]]]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º–æ –±—É–¥—å-—è–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥ run_all() –¥–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ—ó:
    List[(source, section, items)], –¥–µ item = {title, url, date?}
    –¶–µ ¬´–º º—è–∫–∏–π¬ª –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ç–æ—Ä: –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—ñ–¥—Ö–æ–ø–∏—Ç–∏ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.
    """
    out: List[Tuple[str, str, List[Dict[str, str]]]] = []

    # –í–∏–ø–∞–¥–æ–∫: –≤–∂–µ —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü—ñ–π
    if isinstance(results, list):
        for sec in results:
            src = sec.get("source") or sec.get("src") or sec.get("origin") or ""
            section = sec.get("section") or sec.get("name") or ""
            items = sec.get("items") or sec.get("list") or []
            norm_items = []
            for it in items:
                title = (it.get("title") or it.get("name") or it.get("t") or "").strip()
                url = (it.get("url") or it.get("link") or "").strip()
                date_str = (it.get("date") or it.get("date_str") or it.get("d") or "").strip()
                if title and url:
                    norm_items.append({"title": title, "url": url, "date": date_str})
            if norm_items:
                out.append((src, section, norm_items))
        return out

    # –í–∏–ø–∞–¥–æ–∫: dict –∑ –∫–ª—é—á–∞–º–∏-–¥–∂–µ—Ä–µ–ª–∞–º–∏
    if isinstance(results, dict):
        for src, sec_val in results.items():
            if isinstance(sec_val, dict):
                for section, items in sec_val.items():
                    norm_items = []
                    for it in items if isinstance(items, list) else []:
                        title = (it.get("title") or it.get("name") or it.get("t") or "").strip()
                        url = (it.get("url") or it.get("link") or "").strip()
                        date_str = (it.get("date") or it.get("date_str") or it.get("d") or "").strip()
                        if title and url:
                            norm_items.append({"title": title, "url": url, "date": date_str})
                    if norm_items:
                        out.append((str(src), str(section), norm_items))
            elif isinstance(sec_val, list):
                norm_items = []
                for it in sec_val:
                    title = (it.get("title") or it.get("name") or it.get("t") or "").strip()
                    url = (it.get("url") or it.get("link") or "").strip()
                    date_str = (it.get("date") or it.get("date_str") or it.get("d") or "").strip()
                    if title and url:
                        norm_items.append({"title": title, "url": url, "date": date_str})
                if norm_items:
                    out.append((str(src), "", norm_items))
        return out

    # –Ø–∫—â–æ –∑–æ–≤—Å—ñ–º —ñ–Ω—à–µ ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä–æ—é —Ä—è–¥–∫—ñ–≤
    text = str(results).strip()
    if text:
        out.append(("—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "", [{"title": "–í–∏–≤—ñ–¥ –ø–∞—Ä—Å–µ—Ä–∞", "url": "", "date": ""},]))
    return out


def build_all_messages(results: Any) -> List[str]:
    """
    –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–æ–≤–Ω—ñ —Ç–µ–∫—Å—Ç–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏, –±–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–æ–≤–∏–Ω.
    –ü–æ—Ç—ñ–º –≤–æ–Ω–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Ä—ñ–∂—É—Ç—å—Å—è –ø–æ CHUNK_LIMIT.
    """
    norm = normalize_results(results)
    if not norm:
        return ["‚ö†Ô∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."]

    messages: List[str] = []
    for src, section, items in norm:
        header = render_section_header(src or "–¥–∂–µ—Ä–µ–ª–æ", section, len(items))
        buf_lines: List[str] = [header]
        counter = 1
        for it in items:
            line = render_item_line(counter, it["title"], it.get("date", ""), it["url"])
            buf_lines.append(line)
            counter += 1
        full_text = "".join(buf_lines).rstrip()
        messages.extend(chunk_long_text(full_text, CHUNK_LIMIT))
    return messages


async def process_news_easy(chat_id: int, progress_msg: Message | None) -> None:
    """–§–æ–Ω–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞: –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω —à–º–∞—Ç–∫–∞–º–∏."""
    try:
        if run_easy_sources is None:
            raise RuntimeError("run_all() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

        # –í–∏–∫–ª–∏–∫ –Ω–∞—à–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞. –ù—ñ—è–∫–∏—Ö –∑—Ä—ñ–∑—ñ–≤ ‚Äî –±–µ—Ä–µ–º–æ –≤—Å–µ.
        results = await maybe_await(run_easy_sources)

        all_msgs = build_all_messages(results)
        # –Ø–∫—â–æ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ —à–º–∞—Ç–∫—ñ–≤ ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        if len(all_msgs) > 1:
            first_line = f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –±–∞–≥–∞—Ç–æ –Ω–æ–≤–∏–Ω. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é {len(all_msgs)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è(–Ω—å)."
            await send_text_with_retry(chat_id, first_line)

        for m in all_msgs:
            if m.strip():
                await send_text_with_retry(chat_id, m)

        if progress_msg:
            try:
                await progress_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")
            except Exception:
                pass

    except Exception as e:
        log.exception("process_news_easy error: %s", e)
        if progress_msg:
            try:
                await progress_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω.")
            except Exception:
                pass
        if ADMIN_ID:
            try:
                await send_text_with_retry(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ /news_easy: {e}")
            except Exception:
                pass


async def maybe_await(x):
    if asyncio.iscoroutinefunction(x):
        return await x()
    if asyncio.iscoroutine(x):
        return await x
    return x  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç


# ===================== –•–µ–Ω–¥–ª–µ—Ä–∏ =====================

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /news_easy ‚Äî Epravda + Minfin (–≤—Å—ñ –Ω–æ–≤–∏–Ω–∏; –±–µ–∑ –ø—Ä–µ–≤ º—é)"
    )
    await message.answer(text)


@router.message(F.text == "/news_easy")
async def cmd_news_easy(message: Message):
    # –ú–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –¥–∞–ª—ñ ‚Äî —Ñ–æ–Ω–æ–º
    progress = await message.answer("‚è≥ –ó–±–∏—Ä–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10‚Äì20 c–µ–∫—É–Ω–¥.")
    asyncio.create_task(process_news_easy(message.chat.id, progress))


# ===================== AIOHTTP: webhook & health =====================

async def handle_webhook(request: web.Request):
    try:
        data = await request.json()
    except Exception:
        return web.Response(text="Bad Request", status=400)
    try:
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        log.exception("feed_update error: %s", e)
    return web.Response(text="OK")

async def handle_health(request: web.Request):
    return web.json_response({"status": "alive"})

async def handle_parse(request: web.Request):
    """–°–µ—Ä–≤—ñ—Å–Ω–∏–π –µ–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ (JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç)."""
    try:
        if run_easy_sources is None:
            raise RuntimeError("run_all() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        results = await maybe_await(run_easy_sources)
        return web.json_response({"ok": True, "results": results}, dumps=lambda o: json.dumps(o, ensure_ascii=False))
    except Exception as e:
        log.exception("/parse error: %s", e)
        return web.json_response({"ok": False, "error": str(e)})

def make_app() -> web.Application:
    app = web.Application()
    # –í–µ–±—Ö—É–∫ —Å—Ç—Ä–æ–≥–æ –Ω–∞ /webhook/<BOT_TOKEN>
    app.router.add_post(f"/webhook/{BOT_TOKEN}", handle_webhook)
    app.router.add_get("/health", handle_health)
    app.router.add_get("/parse", handle_parse)
    return app


if __name__ == "__main__":
    if not BOT_TOKEN or not WEBHOOK_URL:
        raise SystemExit("BOT_TOKEN/WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ñ –≤ env.")

    app = make_app()
    port = int(os.getenv("PORT", "10000"))
    log.info("======== Running on http://0.0.0.0:%d ========", port)
    web.run_app(app, port=port)