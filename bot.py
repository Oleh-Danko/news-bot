import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from groups.easy_sources import run_all

# === üîê –¢–≤—ñ–π —Ç–æ–∫–µ–Ω ===
BOT_TOKEN = "8392167879:AAG9GgPCXrajvdZca5vJcYopk3HO5w2hBhE"

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def format_news(results):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏–Ω –¥–ª—è Telegram."""
    if not results:
        return "‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –≤—á–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    grouped = {}
    for item in results:
        source = item.get("source", "–Ω–µ–≤—ñ–¥–æ–º–µ –¥–∂–µ—Ä–µ–ª–æ")
        grouped.setdefault(source, []).append(item)

    text = "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
    for src, news_list in grouped.items():
        text += f"\nüîπ –î–∂–µ—Ä–µ–ª–æ: {src}\n"
        for i, n in enumerate(news_list, 1):
            title = n.get("title", "‚Äî")
            date = n.get("date", "‚Äî")
            url = n.get("url", "")
            text += f"{i}. {title} ({date})\n   {url}\n"
    return text


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –Ø –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /news_easy ‚Äî –Ω–æ–≤–∏–Ω–∏ –∑ –ª–µ–≥–∫–∏—Ö –¥–∂–µ—Ä–µ–ª (Epravda, Minfin)\n"
        "‚Ä¢ /news_medium ‚Äî (–ø–æ–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)\n"
        "‚Ä¢ /news_hard ‚Äî (–ø–æ–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)"
    )


@dp.message(Command("news_easy"))
async def news_easy_cmd(message: types.Message):
    await message.answer("‚è≥ –ó–±–∏—Ä–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
    try:
        results = run_all()
        text = format_news(results)

        if len(text) > 4000:
            parts = [text[i:i + 4000] for i in range(0, len(text), 4000)]
            for part in parts:
                await message.answer(part, disable_web_page_preview=True)
        else:
            await message.answer(text, disable_web_page_preview=True)

    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω: {e}")


async def main():
    print("‚úÖ Bot started successfully")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())