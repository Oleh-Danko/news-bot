# bot.py
import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from groups.easy_sources import run_all

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("news-bot")

BOT_TOKEN   = os.getenv("BOT_TOKEN",   "8392167879:AAG9GgPCXrajvdZca5vJcYopk3HO5w2hBhE")
ADMIN_ID    = int(os.getenv("ADMIN_ID", "6680030792"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://universal-bot-live.onrender.com")

bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher()

# ---------- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω—É —Å—Ç–∏–ª—ñ—Å—Ç–∏–∫—É ----------
MAX_TG = 4096
SPLIT_SAFE = 3800  # –∑–∞–ø–∞—Å, —â–æ–± –Ω–µ –≤—Ä—ñ–∑–∞—Ç–∏ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω–æ–º–µ—Ä–∞/URL

def _format_source_block(source_name: str, data: dict) -> list[str]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤ (—â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏ Telegram).
    –ö–æ–∂–µ–Ω –±–ª–æ–∫ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —à–∞–ø–∫–∏:
      ‚úÖ <source> ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
      –£—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ: N (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥—É–±–ª—ñ–≤)
      –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω: M
    –î–∞–ª—ñ –ø—ñ–¥–±–ª–æ–∫–∏ –ø–æ —Å–µ–∫—Ü—ñ—è—Ö:
      –î–∂–µ—Ä–µ–ª–æ: <URL —Å–µ–∫—Ü—ñ—ó> ‚Äî <K> –Ω–æ–≤–∏–Ω:
        1. –ù–∞–∑–≤–∞ (YYYY-MM-DD)
           URL
    """
    header = (
        f"‚úÖ {source_name} ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        f"–£—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ: {data['raw_total']} (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥—É–±–ª—ñ–≤)\n"
        f"–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω: {data['unique_total']}\n\n"
    )

    blocks = []
    cur = header
    for sec in data.get("sections", []):
        sec_head = f"–î–∂–µ—Ä–µ–ª–æ: {sec['url']} ‚Äî {len(sec['items'])} –Ω–æ–≤–∏–Ω:\n"
        sec_body_lines = []
        for i, n in enumerate(sec["items"], 1):
            title = n.get("title", "‚Äî")
            date  = n.get("date", "‚Äî")
            url   = n.get("url", "")
            sec_body_lines.append(f"{i}. {title} ({date})\n   {url}\n")
        sec_text = sec_head + "\n".join(sec_body_lines) + "\n"

        # —è–∫—â–æ —Å–µ–∫—Ü—ñ—è –Ω–µ –≤–º—ñ—â—É—î—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫ ‚Äî –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –±–ª–æ–∫ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π –∑ —Ç—ñ—î—é –∂ —à–∞–ø–∫–æ—é
        if len(cur) + len(sec_text) > SPLIT_SAFE:
            blocks.append(cur.rstrip())
            cur = header + sec_text
        else:
            cur += sec_text

    if cur.strip():
        blocks.append(cur.rstrip())
    return blocks

def format_grouped_payload(grouped: dict) -> list[str]:
    # –ü–æ—Ä—è–¥–æ–∫ –≤–∏–≤–æ–¥—É –¥–∂–µ—Ä–µ–ª —Ñ—ñ–∫—Å—É—î–º–æ: epravda ‚Üí minfin
    order = ["epravda", "minfin"]
    out_blocks = []
    for key in order:
        if key in grouped and grouped[key]["unique_total"] > 0:
            out_blocks.extend(_format_source_block(key, grouped[key]))
    return out_blocks if out_blocks else ["‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."]

# ---------- –•–µ–Ω–¥–ª–µ—Ä–∏ ----------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /news_easy ‚Äî Epravda + Minfin (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ, –±–µ–∑ –ø—Ä–µ–≤‚Äô—é)"
    )

@dp.message(Command("news_easy"))
async def news_easy_cmd(message: types.Message):
    await message.answer("‚è≥ –ó–±–∏—Ä–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
    try:
        grouped = run_all()
        blocks = format_grouped_payload(grouped)
        for b in blocks:
            await message.answer(b, disable_web_page_preview=True)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω: {e}")

# ---------- AIOHTTP + Webhook ----------
async def handle_health(request: web.Request):
    return web.json_response({"status": "alive"})

async def handle_webhook(request: web.Request):
    data = await request.json()
    await dp.feed_webhook_update(bot, data)
    return web.Response(text="OK")

async def on_startup(app: web.Application):
    url = f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}"
    await bot.set_webhook(url, drop_pending_updates=True)
    log.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {url}")

async def on_shutdown(app: web.Application):
    log.info("üîª Deleting webhook & closing session‚Ä¶")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    finally:
        await bot.session.close()
    log.info("‚úÖ Shutdown complete")

def make_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/health", handle_health)
    app.router.add_post(f"/webhook/{BOT_TOKEN}", handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

if __name__ == "__main__":
    port = int(os.getenv("PORT", os.getenv("RENDER_PORT", "10000")))
    web.run_app(make_app(), host="0.0.0.0", port=port)