# bot.py ‚Äî –ø–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è Render (webhook + health), aiogram 3.22

import os, sys, asyncio, logging, importlib.util
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

logging.basicConfig(level=logging.INFO)

# ===== ENV =====
BOT_TOKEN   = os.getenv("BOT_TOKEN")
ADMIN_ID    = os.getenv("ADMIN_ID", "")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä.: https://universal-bot-live.onrender.com
PORT        = int(os.getenv("PORT", "10000"))
HOST        = "0.0.0.0"

if not BOT_TOKEN or not WEBHOOK_URL:
    raise SystemExit("BOT_TOKEN —Ç–∞ WEBHOOK_URL –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ (Render ‚Üí Environment).")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"

# ===== aiogram =====
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ===== —ñ–º–ø–æ—Ä—Ç run_all –∑ groups/easy_sources.py –ë–ï–ó –ø–∞–∫–µ—Ç—ñ–≤ =====
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
EASY_SOURCES_PATH = os.path.join(BASE_DIR, "groups", "easy_sources.py")
if not os.path.exists(EASY_SOURCES_PATH):
    raise SystemExit("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ groups/easy_sources.py")

spec = importlib.util.spec_from_file_location("easy_sources", EASY_SOURCES_PATH)
easy_sources = importlib.util.module_from_spec(spec)
spec.loader.exec_module(easy_sources)
run_all = easy_sources.run_all  # —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫—É —Ç–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à

# ===== –•–ï–õ–ü–ï–† —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (–ø—Ä–æ—Å—Ç–æ –π –±–µ–∑ –ø—Ä–µ–≤ º—é) =====
def format_simple(results: list[dict]) -> str:
    if not results:
        return "‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ/–≤—á–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    lines = [f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω: {len(results)}", ""]
    for i, n in enumerate(results, 1):
        title = n.get("title", "").strip()
        date  = n.get("date", "").strip() or "‚Äî"
        url   = n.get("url", "").strip()
        lines.append(f"{i}. {title} ({date})\n{url}\n")
    return "\n".join(lines).strip()

# ===== HANDLERS =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –Ø –Ω–æ–≤–∏–Ω–Ω–∏–π –±–æ—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /news_easy ‚Äî —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ (Epravda, Minfin)\n"
    )

@dp.message(Command("news_easy"))
async def cmd_news_easy(message: types.Message):
    await message.answer("‚è≥ –ó–±–∏—Ä–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
    try:
        results = run_all()
        text = format_simple(results)

        # –†–æ–∑–±–∏–≤–∫–∞ –ø–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤ —ñ –±–µ–∑ –ø—Ä–µ–≤ º—é (—â–æ–± –Ω–µ —Ç—è–≥–Ω—É–ª–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
        chunk = 4000
        for i in range(0, len(text), chunk):
            await message.answer(text[i:i+chunk], disable_web_page_preview=True)

    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω: {e}")

# ===== AIOHTTP APP (–¥–ª—è Render) =====
async def on_startup(app: web.Application):
    await bot.set_webhook(url=f"{WEBHOOK_URL}{WEBHOOK_PATH}")
    logging.info("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %s", f"{WEBHOOK_URL}{WEBHOOK_PATH}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook(drop_pending_updates=True)

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# /health ‚Äî —â–æ–± —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏, —â–æ —Å–µ—Ä–≤—ñ—Å –∂–∏–≤–∏–π
async def health(request):
    return web.json_response({"status": "alive"})
app.router.add_get("/health", health)

# –†–µ—î—Å—Ç—Ä—É—î–º–æ webhook-—Ä–æ—É—Ç
SimpleRequestHandler(dp, bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    web.run_app(app, host=HOST, port=PORT)