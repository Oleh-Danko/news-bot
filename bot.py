import os
import asyncio
import logging
import inspect
from datetime import datetime
from collections import defaultdict
from typing import Any, Dict, List

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
ADMIN_ID = os.environ.get("ADMIN_ID", "").strip()
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "").strip()

assert BOT_TOKEN, "BOT_TOKEN is required"
assert WEBHOOK_URL, "WEBHOOK_URL is required"

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
MAX_CHARS_PER_MSG = 3800
PAUSE_BETWEEN_MSGS_SEC = 0.06

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s.%(msecs)03d %(levelname)s %(name)s: %(message)s",
    datefmt="%H:%M:%S",
)
log = logging.getLogger("news-bot")

try:
    from groups.easy_sources import run_all as parse_all_sources
except Exception:
    log.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ groups.easy_sources.run_all()")
    raise

async def _safe_send_many(bot: Bot, chat_id: int, messages: List[str]):
    for m in messages:
        # –î—Ä—ñ–±–Ω–∞ –±–µ–∑–ø–µ—á–Ω–∞ –Ω–∞—Ä—ñ–∑–∫–∞ –ø–æ 3800, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –¢–ï–ö–°–¢ –ë–ï–ó –ó–ú–Ü–ù
        if len(m) <= 4096:
            await bot.send_message(chat_id, m)
            await asyncio.sleep(PAUSE_BETWEEN_MSGS_SEC)
            continue
        start = 0
        while start < len(m):
            chunk = m[start:start + MAX_CHARS_PER_MSG]
            await bot.send_message(chat_id, chunk)
            start += MAX_CHARS_PER_MSG
            await asyncio.sleep(PAUSE_BETWEEN_MSGS_SEC)

async def _maybe_await(x):
    return await x if inspect.isawaitable(x) else x

dp = Dispatcher()
bot = Bot(BOT_TOKEN, parse_mode=None)

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /news_easy ‚Äî Epravda + Minfin (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ, –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ; –±–µ–∑ –ø—Ä–µ–≤ º—é)"
    )

@dp.message(Command("news_easy"))
async def cmd_news_easy(message: Message):
    chat_id = message.chat.id
    try:
        await message.answer("‚è≥ –ó–±–∏—Ä–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 10‚Äì20 c–µ–∫—É–Ω–¥.")
    except Exception:
        pass

    try:
        raw = await _maybe_await(parse_all_sources())
        # –Ø–∫—â–æ –ø–∞—Ä—Å–µ—Ä–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –≥–æ—Ç–æ–≤—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –±–ª–æ–∫–∏ ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ¬´—è–∫ —î¬ª
        if isinstance(raw, str):
            await _safe_send_many(bot, chat_id, [raw])
            await bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ.")
            return
        if isinstance(raw, list) and all(isinstance(x, str) for x in raw):
            # –ü–û –ß–ï–†–ó–Ü: —Å–ø–æ—á–∞—Ç–∫—É epravda, –ø–æ—Ç—ñ–º minfin ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ—à—É—î–º–æ
            for block in raw:
                await _safe_send_many(bot, chat_id, [block])
            await bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ.")
            return

        # –Ø–∫—â–æ –∫–æ–ª–∏—Å—å –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî –∑–∞–ø–∞—Å–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞—Ä–∞–∑)
        await bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        await bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ.")

    except Exception as e:
        log.exception("–ü–æ–º–∏–ª–∫–∞ —É /news_easy: %s", e)
        try:
            await bot.send_message(chat_id, "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏–Ω.")
        except Exception:
            pass

async def health(_):
    return web.json_response({"status": "alive"})

def build_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/health", health)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    return app

app = build_app()

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", "10000")))